import cv2
import numpy as np
import imutils

def show(img):
    cv2.imshow("title", img)
    cv2.waitKey(0)
    cv2.destroyAllWindows()

num = 3 # 나는 이미지 이름이 src{num}여서 이렇게 했음. 반복문을 활용해서 잘 하길 바람~
image = cv2.imread(f"src{num}.png") # 이미지 읽어오기
image_org = image.copy() # 원본 이미지 저장
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY) # 그레이 스케일로 변환
blurred = cv2.GaussianBlur(gray, (5, 5), 0) # 가우시안 블러
thresh = cv2.threshold(blurred, 15, 30, cv2.THRESH_BINARY)[1] # Threshold 지정

cnts = cv2.findContours(thresh.copy(), cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_SIMPLE) # 이 함수가 경계를 찾는다.
cnts = imutils.grab_contours(cnts) # 경계 찾은거 도와주는 함수

cnts = [c for c in cnts if len(c) > 200] # 포인트 개수가 200개 이하인 경계 제외
# loop over the contours
for i,c in enumerate(cnts): # 파일을 각각 저장하기 위해 enum 사용
    # compute the center of the contour, then detect the name of the
    # shape using only the contour
    M = cv2.moments(c)
    cX = int((M["m10"] / M["m00"]))
    cY = int((M["m01"] / M["m00"]))
    
    # 사각형 좌표 찾기. b가 붙은 변수는 위,아래,좌,우로 간격 50 둔다.
    x1, y1 = min(c[:,:,0])[0], min(c[:,:,1])[0]
    xb1, yb1 = max(0, min(c[:,:,0])[0]-50), max(0, min(c[:,:,1])[0]-50)
    x2, y2 = max(c[:,:,0])[0], max(c[:,:,1])[0]
    xb2, yb2 = min(image.shape[0], max(c[:,:,0])[0]+50), min(image.shape[1], max(c[:,:,1])[0]+50)
    
    cropped1 = image[y1:y2, x1:x2].copy() # 경계 표시 안된 crop 이미지
#     cv2.imwrite(f"res{num}_{i}1.png", cropped1) # 경계 표시 안된 이미지 저장

    cv2.drawContours(image, [c], -1, (0, 255, 0), 2) # 경계 그리기
    cropped2 = image[y1:y2, x1:x2] # 경계 표시 된 crop 이미지
#     cv2.imwrite(f"res{num}_{i}2.png", cropped)  # 경계 표시 된 이미지 저장
    res_concat = cv2.hconcat([cropped1, cropped2]) # crop 이미지 두장 합치기
    cv2.imwrite(f"res{num}_{i}.png", res_concat) # 합친거 저장



# show the output image
show(cv2.resize(image, dsize=None, fx=0.5, fy=0.5)) # 0.5배 스케일해서 결과 윈도우 띄우기

# cv2.imwrite(f"dst{num}.png", image)
dst_concat = cv2.hconcat([image_org, image]) # 원본과 결과 이미지 두장 합치기
cv2.imwrite(f"dst{num}.png", dst_concat) # 합친